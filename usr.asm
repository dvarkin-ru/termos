;;;	MOTOR STATES
ST1	EQU	00000101B
ST2	EQU	00001001B
ST3	EQU	00001010B
ST4	EQU	00000110B
AUXR	EQU	08EH
BRT	EQU	09CH

;;;	REGISTER BANK 3
;IPTR	EQU	R0 ;LAST IN QUEUE
;OPTR	EQU	R1 ;FIRST IN QUEUE
QCNTR	EQU	R2 ;QUEUE COUNTER


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SYSINI:	; SYSTEM INIT
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CLR	P1.4
	MOV	IE,  #10001010B	;ENABLE TIMERS INTERRUPTS
	MOV	SCON,#52H	;SELECT UART 8 BIT MODE
	MOV	BRT,#0FDH	;SELECT BRT 9600 BAUD RATE
	MOV	AUXR,#11H	;SELECT BRT TIMER AND RUN

	MOV	TMOD,#11H	;SELECT 16 BIT TIMER 0, 1
	MOV	TCON,#01010000B	;START TIMERS

	MOV	RBDR, #90

	MOV	A, #0F0H
MINIT:	MOV	CARSTP, A
	JNB	P3.6, LINIT
	JMP	MINIT
LINIT:	MOV	DAIZY, #100
	CLR	A
	MOV	CARSTP, #100
	CJNE	A, CARSTP, $
	MOV	SPCE, #10
	MOV	DAIZY, #50
	CJNE	A, DAIZY, $
	MOV	LETTER, #0

	RET




CAROFF:	CLR	P1.5
	JB	TOSTART, CSPD_2
	MOV	A, CARSTP
	JZ	PULLED
	JNB	ACC.7, CARSEL
	CPL	A
	INC	A
CARSEL:	CJNE	A, #2, CSS_0
	JMP	CSPD_2

CSS_0:	CJNE	A, #1, INCCS
	MOV	MTRSPD, #0
	JMP	CSPD_1
INCCS:	MOV	A, MTRSPD ; ONLY IF |CARSTP|>1
	CJNE	A, #2, CSS_1
CSS_1:	JNC	CSS_2
	INC	MTRSPD ; ONLY IF SPEED<2
CSS_2:	JZ	CSPD_0
	CJNE	A, #1, CSPD_2
CSPD_1:	MOV	TH0, #0F7H ;CAR MIDDLE
	JMP	SMRET2
CSPD_2:	MOV	TH0, #0FAH ;CAR HIGH
	JMP	SMRET2
CSPD_0:	MOV	TH0, #0F6H ;CAR LOW
	JMP	SMRET2

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LFMTR:	; LF MOTOR INT ROUTINE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	TH0, #0F6H
	CLR	A
	CJNE	A, LFST, LFM_1
	JNB	P3.6, SMRET2
	SETB	P3.2
	SETB	P3.4
	SETB	P3.5
	JMP	SMRET2
LFM_1:	MOV	C, LFST.0
	RLC	A
	MOV	C, P3.6
	RLC	A
	JZ	LFM_2
	ADD	A, #0FDH
	JNZ	SMRET2
LFM_2:	JB	LFST.7, LFM_3
	DEC	LFST
	JMP	SMRET2
LFM_3:	INC	LFST

SMRET2:	POP	PSW
	POP	ACC
	RETI

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SMINT:	; STEPPER MOTORS INTERRUPT
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUSH	ACC
	PUSH	PSW
	JB	P1.4, DZYOFF
	JB	P1.5, CAROFF
PULLED:	JNB	P3.2, LFMTR
	JNB	P3.4, LFMTR
	JNB	P3.5, LFMTR

	MOV	A, DAIZY
	JNZ	DZYMOV

	JNB	INK, MARKED
MRKING:	CLR	P3.2
	CLR	INK
	MOV	LFST,#2H
	JMP	LFMTR

MARKED:	JB	F1, TYPE

	MOV	TH0,#0FAH

	MOV	A,CARSTP
	JNZ	CARMOV

	MOV	A, SPCE
	JB	TOSTART, ISSTRT
	CJNE	A, RBDR, OVRSTP
OVRSTP:	JNC	GOBACK

	CALL	PULBUF
	JNC	SMRET
	CALL	TLET
	JMP	PULLED

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CARBCK:	MOV	A, #(-1)
	CALL	SPCCAR

CARMOV:	JB	ACC.7,CLFT
	DEC	CARSTP
	CALL	CRCCW
	JMP	SMRET
CLFT:	INC	CARSTP
	CALL	CRCW
	JMP	SMRET

GOBACK:	MOV	LFST, #4H
	SETB	TOSTART
	CLR	P3.4
	JMP	SMRET

ISSTRT: CJNE	A, #10, CARBCK
	CLR	TOSTART
	JMP	SMRET


ISMRK:	JB	INK, MRKING
	JMP	SMRET

DZYOFF:	CLR	P1.4
	MOV	A, DAIZY
	JZ	ISMRK
	JNB	ACC.7, DZYSEL
	CPL	A
	INC	A
DZYSEL:	CJNE	A, #2, DSS_0
	JMP	DSPD_2
DSS_0:	CJNE	A, #1, INCDS
	MOV	MTRSPD, #0
	JMP	DSPD_1

DZYMOV:	MOV	TH0,#0FBH
	JB	ACC.7,LCWZ
	DEC	DAIZY
	CALL	LRCCW
	JMP	SMRET

TYPE:	MOV	A, 092H
	JNZ	UNTYPE
	MOV	092H, #10000000B
	MOV	TH0, #0E9H
	JMP	SMRET

UNTYPE:	MOV	092H, #00000000B
	CLR	F1
	JMP	SMRET

LCWZ:	INC	DAIZY
	CALL	LRCW

SMRET:	POP	PSW
	POP	ACC
	RETI

INCDS:	MOV	A, MTRSPD ; ONLY IF |DAIZY|>1
	CJNE	A, #2, DSS_1
DSS_1:	JNC	DSS_2
	INC	MTRSPD ; ONLY IF SPEED<2
DSS_2:	JZ	DSPD_0
	CJNE	A, #1, DSPD_2
DSPD_1:	MOV	TH0, #0F3H ;DZY MIDDLE
	JMP	SMRET
DSPD_2:	MOV	TH0, #0FBH ;DZY HIGH
	JMP	SMRET
DSPD_0:	MOV	TH0, #0EBH ;DZY LOW
	JMP	SMRET



	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RCW:	; STEPPER MOTOR ROTATE CLOCKWIZE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CJNE	A,#ST1,RCW2
	MOV	A,#ST2
	RET
RCW2:	CJNE	A,#ST2,RCW3
	MOV	A,#ST3
	RET
RCW3:	CJNE	A,#ST3,RCW4
	MOV	A,#ST4
	RET
RCW4:	MOV	A,#ST1
	RET


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RCCW:	; STEPPER MOTOR ROTATE COUNTER-CLOCKWIZE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CJNE	A,#ST4,RCCW2
	MOV	A,#ST3
	RET
RCCW2:	CJNE	A,#ST3,RCCW3
	MOV	A,#ST2
	RET
RCCW3:	CJNE	A,#ST2,RCCW4
	MOV	A,#ST1
	RET
RCCW4:	MOV	A,#ST4
	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LRCW:	; MOTOR L ROTATE CLOCKWIZE ONCE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	A, LETTER
	JNZ	LRCW_1
	MOV	LETTER, #100
LRCW_1:	DEC	LETTER
	MOV	A, MOTORL
	CALL	RCW
	JMP	MLWR

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LRCCW:	; MOTOR L ROTATE COUNTER-CLOCKWIZE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	INC	LETTER
	MOV	A, LETTER
	CJNE	A, #100, LRCCW1
	MOV	LETTER, #0
LRCCW1:	MOV	A, MOTORL
	CALL	RCCW


MLWR:	ANL	P1,#11110000B
	ORL	P1,A
	MOV	MOTORL,A
	SETB	P1.4
MLRET:	RET




	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CRCW:	; MOTOR C ROTATE CLOCKWIZE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	A,MOTORC
	CALL	RCW
	JMP	MCWR

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CRCCW:	; MOTOR C ROTATE COUNTER-CLOCKWIZE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	A,MOTORC
	CALL	RCCW

MCWR:	ANL	P1,#11110000B
	ORL	P1,A
	MOV	MOTORC,A
	SETB	P1.5
MCRET:	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LFMOV:	; LINE FEED MOVE FROM BASIC
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL	POP_TOS
	CLR	A
	CJNE	A, LFST, $
	CLR	EA
	MOV	LFST, TOS_L
	JB	LFST.7, LF_NEG
	CLR	P3.4
	SETB	EA
	RET
LF_NEG:	CLR	P3.5
	SETB	EA
	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BEEP_B:	; BEEP
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL	POP_TOS
	CLR	A
BEEP_1:	DJNZ	ACC, $
	DJNZ	ACC, $
	DJNZ	ACC, $
	CLR	P1.6
	DJNZ	ACC, $
	DJNZ	ACC, $
	DJNZ	ACC, $
	SETB	P1.6
	DJNZ	TOS_L, BEEP_1
	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BORDER:	; SET RIGHT BORDER
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL	POP_TOS
	CJNE	TOS_L, #91, $+3
	JNC	BRDERR
	CJNE	TOS_L, #10, $+3
	JNC	SETBRD
BRDERR:	MOV	TOS_L, #90
SETBRD:	MOV	RBDR, TOS_L
	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SERIAL:	; RUN TELETYPE MODE
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	SETB	FLOW
WTSSYM:	JB	KEYRDD, S_TR
	JB	RI, S_REC
	JB	FLWTGL, FLWCHG
	JMP	WTSSYM

S_REC:	MOV	A,SBUF		;SERIAL RECIEVE
	CLR	RI		;Clear reception flag.
	CALL	PSHBUF
	JMP	WTSSYM

S_TR:	JNB     TI,$            ;SERIAL TRANSMIT
	CLR     TI
	MOV	A,KEYBUF
	CLR	KEYRDD
	CJNE	A,#TPLUS,CRTOLF
	MOV	SBUF,#04	;Write out EOT
	CLR	FLOW
	RET

FLWCHG:	CLR	FLWTGL
	JNB     TI, $
	CLR     TI
	JB	XOFF, FLWOFF
	MOV	SBUF, #011H	;Send XON
	JMP	WTSSYM
FLWOFF:	MOV	SBUF, #013H	;Send XOFF
	JMP	WTSSYM

CRTOLF:	CJNE	A,#CR,WR_OUT
	MOV	A,#LF
WR_OUT:	MOV	SBUF,A		;Write out character.
	JMP	WTSSYM


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TLET:	; TYPE LETTER
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	JNB	ACC.7, TLET_L
	JMP	PRN_HI
TLET_L:	CJNE	A, #10D, SPEC_1	;LF
	MOV	LFST, #4H
	CLR	P3.4
	RET
SPEC_1:	CJNE	A, #13D, SPEC_2	;CR
	SETB	TOSTART
	RET
SPEC_2:	CJNE	A, #8D, PLTBL	;BS
	MOV	A, #(-1)
	JMP	SPCCAR

PLTBL:	ADD	A,#(LOTBL-PFET_L-2)	;Offset to start of table.
PFET_L:	MOVC	A,@A+PC
	JMP	TLET_0
LOTBL:	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,62,43,76,39,67,34,56,58
	DB	49,41,15,2,3,1,60,25,16,17
	DB	18,19,20,21,22,23,24,54,53,74
	DB	52,13,45,100,36,28,42,44,26,29
	DB	69,57,47,66,59,38,55,46,61,30
	DB	65,40,31,37,48,33,50,63,35,32
	DB	100,100,100,12,51,72,94,98,88,96
	DB	93,11,89,87,95,7,85,5,6,90
	DB	99,86,79,91,92,77,97,4,8,78
	DB	84,0,100,100,100,100,100,100

PRN_HI:	ADD	A, #(HITBL-PFET_H-130) ;Offset to start of table.
PFET_H:	MOVC	A,@A+PC
	JMP	TLET_0
HITBL:	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,27,100,100,100,64,100
	DB	100,100,100,100,100,100,100,70,100,9
	DB	68,14,10,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,75,100,100
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,73,100,100,100,100
	DB	100,71,100,100,80,100,100,100,100,83
	DB	100,100,100,100,100,100,100,100,100,100
	DB	100,100,100,100,100,100,100,82,100,100
	DB	100,100,100,81,100,100,100,100

TLET_0:	CJNE	A, #100, TLET00
	MOV	A, #1
	JMP	SPCCAR

TLET00:	CPL	A
	INC	A
	ADD	A, LETTER
	CPL	A
	INC	A
	JB	ACC.7, NLET
	CJNE	A, #50, TLET_1
TLET_1:	JNC	CPLPL
	JMP	TLET_E

NLET:	CJNE	A, #(-50), TLET_2
TLET_2:	JC	CPLNL
	JMP	TLET_E

CPLPL:	ADD	A, #156
	JMP	TLET_E

CPLNL:	ADD	A,#(-156)

TLET_E:	MOV	DAIZY, A
	SETB	F1
	SETB	INK
	MOV	A, #1 ; TO SPCCAR

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SPCCAR:	; MOVE CARRIAGE ON SPACE
	; ACC - SPACES, SIGNED, < 8
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUSH	B
	MOV	B, #12
	CLR	EA
	XCH	A, SPCE
	ADD	A, SPCE
	XCH	A, SPCE
	MUL	AB
	ADD	A, CARSTP
	MOV	CARSTP, A
	SETB	EA
	POP	B
	RET

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SPCB:	; SPCCAR FROM BASIC
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	CALL	POP_TOS
	MOV	A, TOS_L
	JMP	SPCCAR

	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
KEYINT:	; KEYBOARD SCAN INTERRUPT
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	TH1, #0D3H
	PUSH	ACC
	PUSH	PSW
	PUSH	KEY
	MOV	KEYROW, #00D

NEXROW:	MOV	P0,#11110000B
	MOV	A, KEYROW
	ORL	P0,A
	MOV	KEY,#00D
	NOP
	NOP
	NOP
	NOP
	MOV	A,P2
NEXKEY:	RRC	A
	JC	NOKEY
	MOV	A,KEYROW
	RL	A
	RL	A
	RL	A
	ADD	A,KEY
	INC	A
	MOV	P0,#11110111B
	NOP
	NOP
	NOP
	NOP
	JNB	P2.0,CAPS
	JNB	P2.3,CAPS
	JMP	KEYEND
CAPS:	ADD	A,#56D
	JMP	KEYEND

NOK_1:	XCH	A, KEY
	JMP	NEXKEY
NOK_2:	XCH	A, KEYROW
	JMP	NEXROW

NOKEY:	XCH	A, KEY
	INC	A
	CJNE	A,#8D,NOK_1
	XCH	A, KEY
	XCH	A, KEYROW
	INC	A
	CJNE	A,#7D,NOK_2
	CLR	A
	CLR	KEYPR

KEYEND:	MOV	P0,#11111111B
	MOV	KEY, A
	POP	ACC
	CJNE	A, KEY, KEYEXT
	JZ	KEYEXT
	JB	KEYPR, KEYEXT
	ADD	A,#(KTBL-KFET-2)	;Offset to start of table.
KFET:	MOVC	A,@A+PC			;Look up corresponding code.
	SETB	KEYPR
	MOV	KEYBUF, A
	SETB	KEYRDD
KEYEXT:	POP	PSW
	POP	ACC
	RETI


;
ESC	EQU	27
QUOTES	EQU	34
QUOTE	EQU	39
ACK	EQU	6
ETX	EQU	3
CUBIC	EQU	179
QUADRO	EQU	178
OHALF	EQU	189
HTAB	EQU	9
BS	EQU	8
DEL	EQU	127
ESHKA	EQU	128
DOWNARR	EQU	129
UPARR	EQU	130
TPLUS	EQU	131
TMINUS	EQU	132
MODKEY	EQU	133


KTBL:	DB	'15623487qtyweriuaghsdfkjzbnxcv,m/09.;plo',ESHKA,CUBIC,'-',DOWNARR,':',TPLUS,'@] ',ESC,HTAB,' ',CR,' ',DEL,BS
	DB	'!%&',QUOTES,ACK,'$(',QUOTE,'QTYWERIUAGHSDFKJZBNXCV,M?=).+PLO',ETX,QUADRO,'_',UPARR,'* ',OHALF,'[',MODKEY,'       '


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PSHBUF:	; PUSH ACC TO CIRCULAR BUFFER
	; "1" IN CARRY IS SUCCESS
	; NEXT INPUT - R0, OUTPUT - R1
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	USING	3
	ORL	PSW,#00011000B	;Select RB3.
	CLR	EA
	CJNE	QCNTR,#0FFH,$+3
	JNC	PSHRET
DO_PSH:	MOVX	@R0,A
	INC	R0
	INC	QCNTR		; Overflow counter
	JNB	FLOW, NOXOFF
	JB	XOFF, NOXOFF
	CJNE	QCNTR, #100D, $+3
	JC	NOXOFF		; NOXOFF if QCNTR<100
	SETB	XOFF
	SETB	FLWTGL
NOXOFF:	SETB	C
PSHRET:	SETB	EA
        ANL     PSW,#11100111B
	RET


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PULBUF:	; PULL CIRCULAR BUFFER TO ACC
	; "1" IN CARRY IS SUCCESS
	; NEXT INPUT - R0, OUTPUT - R1
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	USING	3
	ORL	PSW,#00011000B	;Select RB3.
	CLR	EA
	MOV	A,R1
	CJNE	A,AR0,DO_PUL
	CLR	C
	JMP	PULRET
DO_PUL:	MOVX	A,@R1
	INC	R1
	DEC	QCNTR		; Flow control counter
	JNB	FLOW, NOXON
	JNB	XOFF, NOXON
	CJNE	QCNTR, #0, NOXON
	CLR	XOFF
	SETB	FLWTGL
NOXON:	SETB	C
PULRET:	SETB	EA
	RET

